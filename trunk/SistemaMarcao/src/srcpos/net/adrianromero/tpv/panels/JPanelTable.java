//    Tina POS is a point of sales application designed for touch screens.
//    Copyright (C) 2005 Adrian Romero Corchado.
//    http://sourceforge.net/projects/tinapos
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program; if not, write to the Free Software
//    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

package net.adrianromero.tpv.panels;

import java.awt.*;
import javax.swing.*;
import net.adrianromero.tpv.forms.JPanelView;
import net.adrianromero.tpv.forms.AppView;
import net.adrianromero.tpv.forms.AppLocal;
import net.adrianromero.data.loader.Vectorer;
import net.adrianromero.data.loader.IRenderString;
import net.adrianromero.basic.BasicException;
import net.adrianromero.data.gui.JSaver;
import net.adrianromero.data.gui.MessageInf;
import net.adrianromero.data.gui.JCounter;
import net.adrianromero.data.gui.JLabelDirty;
import net.adrianromero.data.gui.JListNavigator;
import net.adrianromero.data.gui.JNavigator;
import net.adrianromero.data.gui.ListCellRendererBasic;
import net.adrianromero.data.loader.ComparatorCreator;
import net.adrianromero.data.user.BrowsableEditableData;

public abstract class JPanelTable extends JPanel implements JPanelView {
    
    private BrowsableEditableData m_bd;
    
    protected AppView m_App;
    
    /** Creates new form JPanelTableEditor */
    public JPanelTable(AppView oApp) {
        m_App = oApp;
        initComponents();
    }
    
    protected void initNavigation(BrowsableEditableData bd) {
        initNavigation(bd, null, null, (ListCellRenderer) null);
    }
    protected void initNavigation(BrowsableEditableData bd, Vectorer vec, ComparatorCreator cc) {
        initNavigation(bd, vec, cc, (ListCellRenderer) null);
    }   
    protected void initNavigation(BrowsableEditableData bd, Vectorer vec, ComparatorCreator cc, IRenderString rs) {
        initNavigation(bd, vec, cc, new ListCellRendererBasic(rs));
    }
    protected void initNavigation(BrowsableEditableData bd, Vectorer vec, ComparatorCreator cc, ListCellRenderer cr) {
        
        // tomo el data
        m_bd = bd;
        
        // el panel este
        if (cr != null) {
            JListNavigator nl = new JListNavigator(m_bd);
            if (cr != null) nl.setCellRenderer(cr);
            m_jContEditor.add(nl, java.awt.BorderLayout.WEST);
        }
        
        // La Toolbar
        m_jToolbar.add(new JLabelDirty(m_bd));
        m_jToolbar.add(new JCounter(m_bd));
        m_jToolbar.add(new JNavigator(m_bd, vec, cc));
        m_jToolbar.add(new JSaver(m_bd));
    }
    
    public void addFilter(Component comp) {
        add(comp, BorderLayout.NORTH);
    }
    public void addEditor(Component comp) {
        m_jContEditor.add(comp, BorderLayout.CENTER);
    }

    public JComponent getComponent() {
        return this;
    }

    public void activate() {
        try {
            m_bd.actionLoad();
        } catch (BasicException e) {
        }
    }    
    
    public boolean deactivate() {
    // se me debe permitir cancelar el deactivate   
        try {
            return m_bd.actionClosingForm(this);
        } catch (BasicException eD) {
            MessageInf msg = new MessageInf(MessageInf.SGN_NOTICE, AppLocal.getIntString("message.CannotMove"), eD);
            msg.show(this);
            return false;
        }
    }  
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel2 = new javax.swing.JPanel();
        m_jContEditor = new javax.swing.JPanel();
        m_jToolbar = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5)));
        jPanel2.setLayout(new java.awt.BorderLayout());

        m_jContEditor.setLayout(new java.awt.BorderLayout());

        m_jContEditor.add(m_jToolbar, java.awt.BorderLayout.NORTH);

        jPanel2.add(m_jContEditor, java.awt.BorderLayout.CENTER);

        add(jPanel2, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents
  
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel m_jContEditor;
    private javax.swing.JPanel m_jToolbar;
    // End of variables declaration//GEN-END:variables
    
}
